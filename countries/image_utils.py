from PIL import Image, ImageDraw, ImageFont
import os
from datetime import datetime
from django.conf import settings
from .models import Country

def generate_summary_image():
    """
    Generate a summary image after /countries/refresh
    showing:
    - Total countries
    - Top 5 by estimated GDP
    - Last refresh timestamp
    """
    # Ensure cache directory exists
    cache_dir = os.path.join(settings.BASE_DIR, "cache")
    os.makedirs(cache_dir, exist_ok=True)

    # Image settings
    width, height = 800, 500
    background_color = (245, 245, 245)
    text_color = (20, 20, 20)
    accent_color = (0, 100, 200)

    # Create image
    img = Image.new("RGB", (width, height), background_color)
    draw = ImageDraw.Draw(img)

    # Fonts (Pillow uses default if not specified)
    try:
        font_title = ImageFont.truetype("arial.ttf", 30)
        font_text = ImageFont.truetype("arial.ttf", 18)
    except:
        # Fallback for systems without Arial
        font_title = ImageFont.load_default()
        font_text = ImageFont.load_default()

    # Title
    draw.text((20, 20), "Country Summary Report", fill=accent_color, font=font_title)

    # Get stats
    total_countries = Country.objects.count()
    top_countries = Country.objects.filter(estimated_gdp__isnull=False).order_by("-estimated_gdp")[:5]
    last_country = Country.objects.order_by("-last_refreshed_at").first()
    last_refreshed_at = (
        last_country.last_refreshed_at.strftime("%Y-%m-%d %H:%M:%S")
        if last_country else "N/A"
    )

    # Write summary stats
    draw.text((20, 80), f"Total Countries: {total_countries}", fill=text_color, font=font_text)
    draw.text((20, 110), f"Last Refreshed At: {last_refreshed_at}", fill=text_color, font=font_text)
    draw.text((20, 150), "Top 5 Countries by Estimated GDP:", fill=accent_color, font=font_text)

    y_offset = 180
    for i, c in enumerate(top_countries, start=1):
        line = f"{i}. {c.name} â€” {round(c.estimated_gdp or 0, 2):,}"
        draw.text((40, y_offset), line, fill=text_color, font=font_text)
        y_offset += 30

    # Footer
    draw.text((20, height - 40), "Generated by Country Exchange API", fill=(120, 120, 120), font=font_text)

    # Save image
    image_path = os.path.join(cache_dir, "summary.png")
    img.save(image_path)

    return image_path
